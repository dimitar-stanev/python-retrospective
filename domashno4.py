REPOSITORY = 'https://github.com/dimitar-stanev/python-retrospective'

#Двадесет неща, които научих за Python и програмирането,
#по време на курса по Python :
#
#1. В доста голяма степен научих повечето основни
#Python конвенции - дъндъри, именуване на променливи и константи,
#индентация, построяване на кода и др.
#2. Научих голяма част от PEP8 конвенциите - това улеснява в
#огромна степен четимостта на кода, улеснява неговата променливост,
#дава ни възможността да разберем кое как е искал да напише програмиста.
#3. Запознах се с нови за мен структури от данни - като например tuple.
#Обогатих знанията си за това как работят други, например dictionary. (
#особено в задача 2 )
#4. Научих нова за мен концепция - тази за функциите-генератори. Открих,
#че те значително могат да спестят много главоболия и ресурси.
#5. Подаване на функция като аргумент на друга функция - това беше
#доста интересна концепция за мен, макар и не съвсем непозната,
#и я развих в доста голяма степен.
#6. Малко като плагиатстване, но - обхождането на list-ове, dict-ове,
#tuple-и и т.н. и т.н. чрез вида на for цикъл, който прилича на
#foreach в CSharp например.
#7. За пръв път се сблъсквам с език, който оставя на потребителите да,
#така да се каже, бъзикат по различните му настройки, класове, за мен беше
#в началото доста странно и фрапиращо, че можеш да override-неш някой
#оператор например. И го правехме най-редовно. Освен това, имаш достъп до
#builtins, което си е доста впечатляващо ниво на достъп.
#8. След като написах третата задача (сега), вникнах доста в това как точно е
#реализирано ООП в езика Python. В голяма степен то съвпадаше с това, което
#очаквах, макар и с някои дребни, но значителни разлики, като например това,
#че всеки клас-метод трябва задължително да приема като първи атрибут self.
#9. Открих колко лесно е всъщност да не използваш десетки безумни скоби за
#означаване на различните scope-ове. Индентацията е достатъчно добър начин за
#това - върши работа при всякакви случаи, вижда се отдалеч, всичко е наред.
#П.П. Бонус tip : Открих, че ако се опитаме да import-нем от модула __future__
#braces, ни се хвърля exception : Syntax error: not a chance. Хахахахаха xD
#10. Django - невероятната платформа за правене на сайтове. Както те казват -
#за професионалисти с крайни срокове. Изключително интересна идея, научих
#нов тип модел - model view template.
#11. Научих се как се deploy-ва на сървър с wsgi - след много много мъчения.
#12. Обогатих знанията си относно регулярните изрази - използвах ги в създаване
#и търсене след това и match-ване на директории в един уеб-базиран проект.
#13. Фаталното число - нека го отдаден на тестването. След доста разцъкване с
#test.py на всяка задача се научих, че трябва да се тества всяко приложение,
#което напишеш. Не само да го Build-неш и да го пратиш на QA отдела да се оправят.
#Тестването помага в много отношения.
#14. Още една нова за мен концепция - декоратори. Те улесняват и доста подобряват
#производителността на много различни функции.
#15. Покрай курса се научих да именувам променливите си както трябва. По-скоро
#свикнах, че ще съм санкциониран, ако не го правя, и затова го правя винаги.
#16. Видях в доста случаи защо експлицитно е по-добре от имплицитно. Идеята е
#всичко да е ясно, до всичко да имаш достъп, и всичко да е адаптивно.
#17. За пореден път се убедих, че exception-ите понякога са ни много подли
#врагове, а понякога - много добри приятели.
#18. Изчерпах се... Бирата в Торонто ? :)))
